version: "3.8"

services:
  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo-data:/data/db
      - ./file.key:/data/file.key
      - ./setup.sh:/data/setup.sh
    command: mongod --keyFile /data/file.key --replSet rs
  mongodb-replica:
    container_name: mongodb-replica
    image: mongo
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGODB_REPLICA_SET: mongodb-replica-set
      MONGODB_PRIMARY_HOST: mongodb
      MONGODB_PRIMARY_PORT: 27017
    volumes:
      - mongo-replica-data:/data/db
      - ./file.key:/data/file.key
    command: mongod --keyFile /data/file.key --replSet rs

  node:
    container_name: node
    image: node:latest
    volumes:
      - ./server:/usr/local/app
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgres://root:password@database:5432/app}
      JWT_SECRET: ${JWT_SECRET:-jmqlskdfjmlqsdkf}
      # NODE_ENV: ${NODE_ENV:-development}
    working_dir: /usr/local/app
    ports:
      - 127.0.0.1:3000:3000
    command: npm run watch
    env_file:
      - web-variables.env

  database:
    container_name: postgres
    image: postgres
    volumes:
      - postgre-data:/var/lib/postgresql/data/
    ports:
      - 5432:5432 #port on host:port in container
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U root"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  mongo-data: {}
  postgre-data: {}
  mongo-replica-data: {}
